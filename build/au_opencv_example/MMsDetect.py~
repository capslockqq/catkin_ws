#!/usr/bin/env python
import cv2 
import urllib
import numpy as np
import math

def get_from_webcam():
    """
    Fetches an image from the webcam
    """
    print "try fetch from webcam..."
    stream=urllib.urlopen('http://192.168.0.20/image/jpeg.cgi')
    bytes=''
    bytes+=stream.read(64500)
    a = bytes.find('\xff\xd8')
    b = bytes.find('\xff\xd9')

    if a != -1 and b != -1:
        jpg = bytes[a:b+2]
        bytes= bytes[b+2:]
        i = cv2.imdecode(np.fromstring(jpg, dtype=np.uint8),cv2.CV_LOAD_IMAGE_COLOR)
        return i
    else:
        print "did not receive image, try increasing the buffer size in line 13:"	

def optimizePic(image):
	refGray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
	cv2.imshow("refGray",refGray)
	
	edges = cv2.Canny(refGray,120,140)
	cv2.imshow('Canny',edges)

	#ret,refTh1 = cv2.threshold(refGray,150,255,cv2.THRESH_BINARY_INV)
	#cv2.imshow('RefThresholded',refTh1)

	#refDilated = cv2.dilate(edges,np.ones((3,3),np.uint8))
	#cv2.imshow('RefDilated',refDilated)

	refClosed = cv2.morphologyEx(edges, cv2.MORPH_CLOSE,np.ones((5,5),np.uint8))
	cv2.imshow('RefCload',refClosed)
	print "sidst"
	return refClosed


def optimizeCanny(image):
	refGray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
	cv2.imshow("refGray",refGray)
	
	edges = cv2.Canny(refGray,120,140)
	cv2.imshow('Canny',edges)

	epsilon = 0.1*cv2.arcLength(cnt,True)
	approx = cv2.approxPolyDP(cnt,epsilon,True)
	return 0

	

def sortContourSize(*contourList):
	MMlist = []
	for i,cnt in enumerate(contourList):
		area = cv2.contourArea(cnt)
		if area > 200 and area < 350:
			MMlist.append(contourList[i])
	return MMlist

def shapeMatchingContour(*contourList):
	result = []
	finalContourList = []
	for i,cnt in enumerate(contourList):
		result[i] = cv2.matchShapes([MMcntRef[0]],cnt,1,0.0)
		result[i] += cv2.matchShapes([MMcntRef[1]],cnt,1,0.0)
		result[i] += cv2.matchShapes([MMcntRef[2]],cnt,1,0.0)
		result[i] = result[i]/3

	for i, tmpResult in result: 
		if tmpResult < 0.2:
			finalContourList.append(contourList[i])
	return finalContourList

		#for j,x in MMcntRef 
			#cv2.matchShapes([MMcntRef[j]],contours[i],1,0.0)	

			
#refImage = get_from_webcam()
refImage = cv2.imread('originalRef.jpg')
cv2.imwrite('originalRef.jpg',refImage)
cv2.imshow('FromWebcam',refImage)

refClosed = optimizePic(refImage)


#Konturanalyse af reference billede
refCnt, refHierarchy = cv2.findContours(refClosed,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)

for b in refCnt:
	cv2.drawContours(refImage,[b],0,(255,0,0),2)

cv2.imshow('refContours',refImage)

print len(refCnt)

MMcntRef = []

for i,cnt in enumerate(refCnt):
	area = cv2.contourArea(cnt)
	print area
	#if area > 240 and area < 290:
		#MMcnt.append(refCnt[i])

MMcntRef.append(refCnt[0]) #Area = 284
MMcntRef.append(refCnt[1]) #Area = 218
MMcntRef.append(refCnt[3]) #Area = 243.5


newRefImage = cv2.imread('originalRef.jpg')

for b in MMcntRef:
	cv2.drawContours(newRefImage,[b],0,(255,0,0),2)

cv2.imshow('MMs detected',newRefImage)

#Ref processing is done. 3 MMs ref are stored MMcntRef for comparison later

#Now import a live picture from camera and locate MMs
#webcamImage = get_from_webcam()
#cv2.imwrite('imageCopy.jpg',webcamImage)
imageCopy = cv2.imread('imageCopy.jpg')
#cv2.imshow('ImageFromCamNew',webcamImage)

imgClosed = optimizePic(imageCopy)

cv2.imshow('imgclosed',imgClosed)

Cnt, refHierarchy = cv2.findContours(imgClosed,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)

for b in Cnt:
	cv2.drawContours(imageCopy,[b],0,(255,0,0),2)

cv2.imshow('allContours',imageCopy)

contoursSortedList = []

contoursSorted = sortContourSize(*Cnt)

print len(contoursSorted)

imageCopyNew = cv2.imread('imageCopy.jpg')

for b in contoursSorted:
	cv2.drawContours(imageCopyNew,[b],0,(255,0,0),2)

cv2.imshow('Found MMs',imageCopyNew)

h = 2
## TEST
imageCopyNew1 = cv2.imread('imageCopy.jpg')
cv2.drawContours(imageCopyNew1,contoursSorted,h,(255,0,0),2)

cv2.drawContours(imageCopyNew1,MMcntRef,0,(255,0,0),2)

cv2.imshow('imageCopyNew1',imageCopyNew1)

print "Match result:"
print cv2.matchShapes(MMcntRef[0],contoursSorted[h],1,0.0)


cv2.waitKey(0)






